@fastlane_commons_dir_path = File.expand_path(File.dirname(__FILE__))

def smf_import_all(path)
  UI.message("Importing files in dir #{path}")
  Dir["#{path}/**/*.rb"].each do |file|
    UI.message("Importing #{file}")
    import(file)
  end
end

def smf_workspace_dir
  path = "#{Dir.pwd}"
  path = path.chomp('/fastlane') if path.end_with?('/fastlane')
  path = path.chomp('/Sparkle-Package-Creator') if path.end_with?('/Sparkle-Package-Creator')
end

def smf_import_commons

  case @platform
  when :ios, :ios_framework, :macos
    @fastlane_commons_dir_path = "#{smf_workspace_dir}/.fastlane-smf-commons"
  when :android
    @fastlane_commons_dir_path = "#{smf_workspace_dir}/.idea/.fastlane-smf-commons"
  when :flutter
    @fastlane_commons_dir_path = "#{smf_workspace_dir}/.idea/.fastlane-smf-commons"
  else
    UI.message("There is no platform \"#{@platform}\", exiting...")
    raise 'Unknown Platform'
  end

  if !Dir.exist?(@fastlane_commons_dir_path)
    UI.message('The fastlane commons directory does not exist yet.')
    smf_clone_fastlane_commons_repo
  end

  UI.message('Import files from fastlane commons directory.')

  fastlane_dir_path = "#{@fastlane_commons_dir_path}/fastlane"
  smf_import_all("#{fastlane_dir_path}/utils")
  smf_import_all("#{@fastlane_commons_dir_path}/commons")
  smf_import_all("#{@fastlane_commons_dir_path}/tools")

  case @platform
  when :ios
    ios_setup_file = "#{@fastlane_commons_dir_path}/setup/ios_setup.rb"
    if File.exist?(ios_setup_file)
      import(ios_setup_file)
    else
      raise "Can't find ios_setup file at #{ios_setup_file}"
    end
    UI.message('Imported ios release file.')

  when :ios_framework
    pod_setup_file = "#{@fastlane_commons_dir_path}/setup/ios_framework_setup.rb"
    if File.exist?(pod_setup_file)
      import(pod_setup_file)
    else
      raise "Can't find pod_setup file at #{pod_setup_file}"
    end
    UI.message('Imported pod release file.')

  when :macos
    macos_setup_file = "#{@fastlane_commons_dir_path}/setup/macos_setup.rb"
    if File.exist?(macos_setup_file)
      import(macos_setup_file)
    else
      raise "Can't find macos_setup file at #{macos_setup_file}"
    end
    UI.message('Imported macos release file.')

  when :android
    android_setup_file = "#{@fastlane_commons_dir_path}/setup/android_setup.rb"
    if File.exist?(android_setup_file)
      import(android_setup_file)
    else
      raise "Can't find android_setup file at #{android_setup_file}"
    end
    UI.message('Imported android release file.')

  when :flutter
    flutter_setup_file = "#{@fastlane_commons_dir_path}/setup/flutter_setup.rb"
    if File.exist?(flutter_setup_file)
      import(flutter_setup_file)
    else
      raise "Can't find flutter_setup file at #{flutter_setup_file}"
    end
    UI.message('Imported flutter setup file.')
  else
    UI.message("There is no platform \"#{@platform}\", exiting...")
    raise 'Unknown platform'
  end
end

# Returns the path to the Config.json
def fastlane_config_path
  smf_workspace_dir + '/Config.json'
end

# loads the config json content into the @smf_fastlane_config env variable
def smf_load_fastlane_config
  config_path = fastlane_config_path
  UI.message("Reading the SMF Fastlane config from \"#{config_path}\"")
  config_file = File.read(config_path)
  if config_file
    @smf_fastlane_config ||= JSON.parse(config_file, :symbolize_names => true)
    UI.success('Parsed config file into the hash map')
  else
    raise "Error: The SMF Fastlane config file doesn't exist at path \"#{config_path}\""
  end
end

def smf_set_platform_dynamically_if_needed
  if !ENV['OVERRIDE_PLATFORM'].nil?
    UI.important("Dynamically setting @platform to #{ENV['OVERRIDE_PLATFORM'].to_sym}")
    @platform = ENV['OVERRIDE_PLATFORM'].to_sym
  end
end

# removes the fastlane commons repo
def smf_remove_fastlane_commons_repo
  sh "if [ -d #{@fastlane_commons_dir_path} ]; then rm -rf #{@fastlane_commons_dir_path}; fi"
end

# clones the fastlane commons repo
def smf_clone_fastlane_commons_repo
  smf_remove_fastlane_commons_repo if File.exists?(@fastlane_commons_dir_path)

  UI.message('Downloading Fastlane Commons Repository.')
  sh 'git clone -b "' + @fastlane_commons_branch + "\" git@github.com:smartmobilefactory/SMF-Fastlane-Commons.git #{@fastlane_commons_dir_path}"
end

smf_set_platform_dynamically_if_needed
smf_import_commons
smf_load_fastlane_config

desc 'Called on error'
error do |lane, exception, options|
  UI.error("Exception: #{exception.to_s} was called from lane #{lane.to_s}.")

  build_variant = options[:build_variant]

  name = ''
  slack_channel = nil

  if !@smf_fastlane_config[:project].nil? && !@smf_fastlane_config[:project][:slack_channel].nil?
    slack_channel = @smf_fastlane_config[:project][:slack_channel]
  end
  
  case @platform
  when :ios, :macos, :android, :flutter
    UI.message('Handling exception for iOS/macOS/android/flutter.')
    name = smf_get_default_name_of_app(build_variant)

  when :ios_framework
    UI.message('Handling exception for iOS Framework.')
    name = smf_get_default_name_of_pod(build_variant)

  else
    UI.message("There is no platform \"#{@platform}\", exiting...")
    raise 'Unknown Platform'
  end

  smf_handle_exception(
    exception: exception,
    name: name,
    slack_channel: slack_channel
  )
end

# sets the commons dir path and clones the fastlane repo
lane :smf_setup_workspace do
  smf_git_pull("")
end


