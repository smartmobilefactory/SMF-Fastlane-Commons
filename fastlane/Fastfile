@fastlane_commons_dir_path = File.expand_path(File.dirname(__FILE__))

def import_all(path)
  Dir["#{path}/**/*.rb"].each do |file|
    import(file)
  end
end

def smf_workspace_dir
  path = "#{Dir.pwd}"
  path = path.chomp('/fastlane') if path.end_with?('/fastlane')
end

def smf_import_commons

  case @platform
  when :ios
    @fastlane_commons_dir_path = "#{smf_workspace_dir}/.fastlane-smf-commons"
  when :android
    @fastlane_commons_dir_path = "#{smf_workspace_dir}/.idea/.fastlane-smf-commons"
  when :flutter
    UI.message('Setup for flutter is not implemented yet')
  else
    UI.message("There is no platform \"#{@platform}\", exiting...")
    raise 'Unknown Platform'
  end

  if !Dir.exist?(@fastlane_commons_dir_path)
    UI.message('There fastlane commons directory does not exist.')
    return
  else
    UI.message('Import files from fastlane commons directory.')
  end

  fastlane_dir_path = "#{@fastlane_commons_dir_path}/fastlane"
  import_all("#{fastlane_dir_path}/utils")
  import_all("#{@fastlane_commons_dir_path}/commons")

  case @platform
  when :ios
    ios_setup_file = "#{@fastlane_commons_dir_path}/ios_release.rb"
    File.exist?(ios_setup_file) ? import(ios_setup_file) : return
    @fastlane_commons_dir_path += '/legacy/ios'
    ios_setup_file = "#{@fastlane_commons_dir_path}/fastlane/setup.rb"
    import(ios_setup_file)
    smf_setup_ios_fastlane_commons(options)
  when :android
    android_setup_file = "#{@fastlane_commons_dir_path}/android_release.rb"
    File.exist?(android_setup_file) ? import(android_setup_file) : return
    UI.message("Imported android release file.")
    @fastlane_commons_dir_path += '/legacy/android'
    import_all "#{@fastlane_commons_dir_path}/fastlane/lanes"
  when :flutter
    UI.message('Setup for flutter is not implemented yet')
  else
    UI.message("There is no platform \"#{@platform}\", exiting...")
    raise 'Unknown platform'
  end
end

smf_import_commons

desc 'Setup'
before_all do |lane, options|
  case @platform
  when :ios
    smf_setup_workspace
  when :android
    UI.message('Setup for Android is implemented in Pipeline Commons')
  when :flutter
    UI.message('Setup for flutter is not implemented yet')
  else
    UI.message("There is no platform \"#{@platform}\", exiting...")
    raise 'Unknown platform'
  end
end

# Returns the path to the Config.json
def fastlane_config_path
  smf_workspace_dir + '/Config.json'
end

# loads the config json content into the @smf_fastlane_config env variable
def smf_load_fastlane_config
  config_path = fastlane_config_path
  UI.message("Reading the SMF Fastlane config from \"#{config_path}\"")
  config_file = File.read(config_path)
  if config_file
    @smf_fastlane_config ||= JSON.parse(config_file, :symbolize_names => true)
    UI.success('Parsed config file into the hash map')
  else
    raise "Error: The SMF Fastlane config file doesn't exist at path \"#{config_path}\""
  end
end

# removes the fastlane commons repo
def smf_remove_fastlane_commons_repo
  sh "if [ -d #{@fastlane_commons_dir_path} ]; then rm -rf #{@fastlane_commons_dir_path}; fi"
end

# clones the fastlane commons repo
def smf_clone_fastlane_commons_repo
  smf_remove_fastlane_commons_repo if File.exists?(@fastlane_commons_dir_path)

  fastlane_commons_branch = @smf_fastlane_config[:project][:fastlane_commons_branch]

  sh 'git clone -b "' + fastlane_commons_branch + "\" git@github.com:smartmobilefactory/SMF-Fastlane-Commons.git #{@fastlane_commons_dir_path}"
end

desc 'Called on error'
error do |lane, exception|
  UI.error("Exception: #{exception.to_s} was called from lane #{lane.to_s}.")

  case @platform
  when :ios
    if @smf_set_should_send_deploy_notifications == true || @smf_set_should_send_build_job_failure_notifications == true
      UI.message('Handling exception for iOS.')

      if @smf_fastlane_config.key?('build_variants')
        name = !@smf_fastlane_config[:build_variants][@smf_build_variant_sym][:podspec_path].nil? ? get_default_name_of_pod : get_default_name_of_app(@smf_build_variant)
      else
        name = get_default_name_of_app(@smf_build_variant)
      end

      smf_handle_exception(
          exception: exception,
          name: name
      )
    else
      UI.message('Not handling exception because of lane.')
    end
  when :android
    if lane == :releasing_pr_phase || lane == :deploy
      UI.message('Handling exception for android.')
      smf_handle_exception(
          exception: exception,
          name: get_default_name_of_app(ENV['BUILD_VARIANT'])
      )
    else
      UI.message('Not handling exception because of lane.')
    end
  when :flutter
    UI.message('Error for flutter is not implemented yet')
  else
    UI.message("There is no platform \"#{@platform}\", exiting...")
    raise 'Unknown Platform'
  end
end

# sets the commons dir path and clones the fastlane repo
lane :smf_setup_workspace do |options|
  smf_load_fastlane_config
  UI.message('Downloading Fastlane Commons Repo')
  smf_clone_fastlane_commons_repo
end

def smf_is_slack_enabled
  ENV[$SMF_IS_SLACK_ENABLED].nil? ? true : ENV[$SMF_IS_SLACK_ENABLED] == 'true'
end