require 'json'

puts "Build Version: <b>#{ENV["BUILD_VERSION"]}</b>"

## WARNINGS:
if (github.pr_body + github.pr_title).include?("WIP")
  warn("Pull Request is Work in Progress")
end

can_merge = github.pr_json["mergeable"]
warn("This PR cannot be merged yet.", sticky: false) unless can_merge

## TODOs:
todoist.warn_for_todos
todoist.print_todos_table

## LINT:
JSON.parse(ENV["DANGER_ANDROID_LINT_PATHS"]).each do |lint_path|
  if !lint_path.nil?
    if File.exist?(lint_path)
      android_lint.report_file = lint_path
      android_lint.filtering = true
      android_lint.skip_gradle_task = true
      android_lint.lint(inline_mode: true)
    else
      fail("Android Lint task is set but there is no report file")
    end
  end
end

## CHECKSTYLE:
JSON.parse(ENV["DANGER_CHECKSTYLE_PATHS"]).each do |checkstyle_path|
  if !checkstyle_path.nil?
    if File.exist?(checkstyle_path)
      checkstyle_format.base_path = Dir.pwd
      checkstyle_format.report checkstyle_path
    else
      fail("Checkstyle task is set but there is no report file")
    end
  end
end

## JUNIT:
JSON.parse(ENV["DANGER_JUNIT_PATHS"]).each do |junit_tests_dir|
  if !junit_tests_dir.nil?
    test_results = Dir["#{junit_tests_dir}/*.xml"]
    if test_results.empty?
      fail("JUnit task is set but there are no report files")
    else
      test_results.each do |file_name|
        junit.parse file_name
        junit.show_skipped_tests = true
        junit.report
      end
    end
  end
end

## JIRA:
JSON.parse(ENV["DANGER_JIRA_KEYS"]).each do |key|
  jira.check(key: key["key"], url: key["url"], search_commits: true)
end
