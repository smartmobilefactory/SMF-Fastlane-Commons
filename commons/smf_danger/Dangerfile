require 'json'

puts "Danger: Bump Type"
if ENV['MULTIPLE_BUMP_TYPES_ERROR'] == 'true'
  warn("⛔️ You have selected <b>multiple</b> \"bump types\" in the description of this PR. Please select only one!")
elsif ENV['NO_BUMP_TYPE_ERROR'] == 'true'
  warn("⛔️ You <b>didn't</b> select a \"bump type\" in the description of this PR. Please select one!")
elsif !ENV['POD_VERSION'].nil?
  message("Upcoming Build Version is <b>#{ENV['POD_VERSION']}</b>")
end

puts "Danger: Common-Project-Setup-Files check"
## COMMON PROJECT SETUP FILES CHECK
if ENV['COMMON_PROJECT_SETUP_FILES_OUTDATED'] == 'true'
  warn('The SMF-iOS-CommonProjectSetupFiles are not up to date with origin/master !')
end

puts "Danger: Github Warnings"
## WARNINGS:
if (github.pr_body + github.pr_title).include?("WIP")
  warn("Pull Request is Work in Progress")
end

can_merge = github.pr_json["mergeable"]
warn("This PR cannot be merged yet.", sticky: false) unless can_merge

puts "Danger: TODOs"
begin
  ## TODOs:
  todoist.warn_for_todos
  todoist.print_todos_table
rescue
  message("Todoist could not be executed")
end

puts "Danger: Code Lint"
## LINT:
JSON.parse(ENV["DANGER_ANDROID_LINT_PATHS"]).each do |lint_path|
  if !lint_path.nil?
    if File.exist?(lint_path)
      android_lint.report_file = lint_path
      android_lint.filtering = true
      android_lint.skip_gradle_task = true
      android_lint.lint(inline_mode: true)
    else
      fail("Android Lint task is set but there is no report file")
    end
  end
end

puts "Danger: Repo Clean-up"
## REPO CLEAN UP
JSON.parse(ENV['DANGER_REPO_CLEAN_UP_FILES']).each do |file|
  warn("Deprecated file or folder: '#{file}'. Please remove from the repository")
end

JSON.parse(ENV['DANGER_REPO_CLEAN_UP_PROJECT_CONFIG_KEYS_ONLY']).each do |key|
  warn("Config.json: Deprecated key in 'project' hash, please remove: '#{key}'")
end

JSON.parse(ENV['DANGER_REPO_CLEAN_UP_BUILD_VARIANTS']).each do |key|
  warn("Config.json: Deprecated key in 'build_variants' hash, please remove: '#{key}'")
end

JSON.parse(ENV['DANGER_REPO_MISSING_REQUIRED_PROJECT_CONFIG_KEYS']).each do |key|
  failure("[ERROR] - Config.json: Missing required key in 'project' hash, please add: '#{key}'")
end

puts "Danger: Generate Swiftlint rules report"
## SWIFTLINT RULES REPORT
unless ENV['DANGER_SWIFT_LINT_RULES_REPORT'].nil?
  message(ENV['DANGER_SWIFT_LINT_RULES_REPORT'])
end

puts "Danger: Checkstyle"
## CHECKSTYLE:
JSON.parse(ENV["DANGER_CHECKSTYLE_PATHS"]).each do |checkstyle_path|
  if !checkstyle_path.nil?
    if File.exist?(checkstyle_path)
      checkstyle_format.base_path = Dir.pwd
      checkstyle_format.report checkstyle_path
    else
      fail("Checkstyle task is set but there is no report file")
    end
  end
end

puts "Danger: JUnit"
## JUNIT:
JSON.parse(ENV["DANGER_JUNIT_PATHS"]).each do |junit_tests_dir|
  if !junit_tests_dir.nil?
    test_results = Dir["#{junit_tests_dir}/*.xml"]
    if test_results.empty?
      fail("JUnit task is set but there are no report files")
    else
      test_results.each do |file_name|
        junit.parse file_name
        junit.show_skipped_tests = true
        junit.report
      end
    end
  end
end

puts "Danger: Jira tickets"
## JIRA TICKETS
if ENV["DANGER_JIRA_TICKETS"].nil? || ENV["DANGER_JIRA_TICKETS"].empty? then
  warn("Unable to find any Jira Tickets related to this Pull Request, are there any?")
else
  message(ENV["DANGER_JIRA_TICKETS"])
end

puts "Danger: Xcode warnings"
## XCODE WARNINGS
if File.exist?(ENV['DANGER_RESULT_BUNDLE_PATH'])
  xcode_summary.inline_mode = true
  xcode_summary.ignored_files = 'Pods/**'

  xcode_summary.ignored_results { |result|

      if result.location.nil?
          result.message.scan(/.*\.swift.*/).empty?
      else
          File.fnmatch('*[^.swift]', result.location.file_path)
      end
  }

  xcode_summary.report ENV['DANGER_RESULT_BUNDLE_PATH']
end

puts "Danger: Thread sanitizer"
## Thread sanitizer
unless ENV['DANGER_SANITIZER_WARNINGS'].nil?
  warning(ENV['DANGER_SANITIZER_WARNINGS'])
end

xcode_warnings = [
  'DANGER_ENABLE_BITCODE',
  'DANGER_SWIFT_VERSION',
  'DANGER_IPHONEOS_DEPLOYMENT_TARGET',
  'DANGER_MACOSX_DEPLOYMENT_TARGET',
  'DANGER_TVOS_DEPLOYMENT_TARGET',
  'DANGER_WATCHOS_DEPLOYMENT_TARGET'
]

xcode_warnings.each do |warning|
  if !ENV[warning].nil? && !ENV[warning].empty? then
    warn(ENV[warning])
  end
end
